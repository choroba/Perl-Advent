Author: Emine Sule Celik <esulecelik@gmail.com>
Title: A Time-Tested Powerhouse for Processing XML
Topic: XML::Twig

=encoding utf8

XML was the preferred communication language used by services in the early 2000s.
During that time, governments were establishing their own e-government systems,
while companies were developing their SOAP services. Then, BOOM! Services began
to adopt JSON because it was a lightweight and efficient alternative to XML.
However, even though JSON became the new standard, old services were still in use
and being maintained.Rewriting a system from scratch is not easy, and it might not
even be necessary. That might be why XML is still in use, or perhaps governments
and companies simply adopt the "as far as it goes" mindset. Who knows! Let's parse
some XML and beat that services up! 

Here is where the sweetest and most beloved Perl library, L<XML::Twig>, comes into
play.

=head2 Parsing XML
Suppose we provide a service to manage internet access for a hotelâ€™s guests. The 
hotel's property management system stores its guests in a file using XML. We need
to read that file in order to check if the user is a guest of the hotel. In order
to gain access to internet a user should type their id and wifi password correctly.

The following is the XML format:

=begin code
<?xml version="1.0" eencoding="UTF-8"?>
<guestList>
  <guest room="201" wifiKey="ryan1234" name="Michael" surname="Scott" idType="P" id="CB5634431" gender="M" country="USA" checkIn="2024-11-29 14:03:23" checkOut=""></guest>
  <guest room="202" wifiKey="X0K7F2ie!" name="Dwight" surname="Schrute" idType="P" id="AB3056430" gender="M" country="USA" checkIn="2024-11-29 14:03:23" checkOut=""></guest>
  <guest room="305" wifiKey="SNbsnz" name="Selim Serhat" surname="Celik" idType="TC" id="00011122233" gender="M" country="TR" checkIn="2024-11-29 14:03:23" checkOut=""></guest>
  <!-- Other guest entries can follow here -->
</guestList>
=end code

This file is located at 'hotelpms/guests.xml'. To parse file we need to provive this
file path to C<parsefile> function.

=begin code
use strict;
use warnings;
use diagnostics;
use XML::Twig;

sub check_guest {
  my $id = shift;
  my $password = shift; 

  my $twig = XML::Twig -> new();
  $twig -> parsefile( "/hotelpms/guests.xml") || # handle error;

}
=end code

In order to reach C<<guest>> tags we first need to get C<<guestList>> which is
root of this XML document. The C<<$twig->root>> method will return the direct 
parent of all other elements. 

