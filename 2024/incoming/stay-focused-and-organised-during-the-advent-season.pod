Author: Sébastien Feugère <seb@feugere.net>
Title: Stay focused and organised during the advent season
Topic: Methodology, standups,  mental health, Object::Pad, App::Standup::Diary

=encoding utf8

=head2 Toys warehouse and drones

Christmas is coming and the elves are getting excited and stressed preparing all
the packages. In 2024, the North Pole is equiped with a Toy Warehouse that
replaced the ancient Toy Workshop (toys now come from third party workshops from all
around the world).

In the recent years, Santa simplified his deliveries by investing in a Reindeer
Drones Delivery system, also known as I<RDD>. They made the work much easier,
reduced deliveries errors (did you ever wondered why some persons were unhappy
with their christmas present?). It required to hire a team of drone engineers.
Those tools are great, but as with any technology, they bring a large batch of
I<fun> challenges.

North Pole elves use top notch automation and deliveries dispatch systems, but
still, this is a very critical time with a non-negociable deadline. The stress
is at it's peak. All sort of operationnal issues must be managed, what requires
to communicate efficiently with the I<DEBT> (Devops Elves Backend Team).

=head2 Agile at the Toys warehouse

Santa's elves team do daily standups. This is what L<Elf ProductOwner
|https://christmas-specials.fandom.com/wiki/Boss_Elf> decided after it
looked like it would improve the whole North Pole team mental health.
Each elf have to speak up and announce:

=for :list
* what they did in the last day
* what they plan to do today
* announce any blocker so that other elves can support them

It proved to encourage team communication and Elf Foreman is able to inform
other teams about any blocker that could put this sensible work at risk.

=head2 Someone is getting extra-stressed

Now L<Hermey the Elf|https://christmas-specials.fandom.com/wiki/Hermey> got more
problems. Getting stressed about the long December month was already quite a
burden.

Since Hermey was not too interested in toys making and that he seemed to have an
interest in meticulous work, Elf ProductOwner decided to realocate him to the
Reindeer Drones Delivery team leaded by Elf Sparkle.

Speaking every morning in front of other elves about what he accomplished, tell
his feelings, and asking for help is definitelly too much for Hermey. The poor
thing couldn't bear it and each day, would babble a meaningless report. Hermey
actually know what he is doing, and he good at it, but the stress of the social
meeting make it harder for Hermey because he is not the kind of person able to
improvise a thirty seconds talk.

=head2 App::Standup::Diary to the rescue

Sparkle, the team manager, noticed Hermey's struggle. She decided to share
a tool she developped and used since a couple of years now. I<"Take a look at
App::Standup::Diary on the CPAN">, she said. I<"It might help you organising
your thoughs and communicate better.">.

Hermey noded and went to his terminal:

=begin bash

    cpm install -g App::Standup::Diary

=end bash

I<"Check the chat, I have sent you a nice bash alias"> Sparkle said.

=begin bash

    alias diary="diary --data-dir ~/toy-warehouse/standup --project-name 'rdd'";

=end bash

Once you will have configured that, we'll take a dive into the internals together!

=head2 Daily usage

C<--data-dir> is where the standup notes are stored. They will be sorted in
separate files for each day. Year and month directories are automatically
created. The directory tree will look like this:

=begin code

    tree /home/sparkle/toy-warehouse/standup
    /home/sparkle/toy-warehouse/standup
    ├── 2021
    ├── 2022
    ├── 2023
    └── 2024
        ├── 01
        ├── 02
        ├── 03
        ├── etc.
        └── 11
            ├── 2024-11-04_rdd.md
            ├── 2024-11-05_rdd.md
            ├── 2024-11-06_rdd.md
            ├── etc.
            ├── 2024-11-28_rdd.md
            ├── 2024-11-29_rdd.md
            └── 2024-11-30_rdd.md

=end code

C<--project-name> is used for each note file name, as well as the file title.

This is all what is needed to use it as your daily standup notes taking app.
Just run C<diary> every morning and get prepared for the next meeting.

=head2 A dive into App::Standup::Diary

Let's inspect what kind of marvels this command line tool contains. It use the
following CPAN modules:

=over 2

=item L<Object::Pad>

It's used as a base OO toolkit for classes and roles.

=item L<Time::Piece>

To deal with date management.

=item L<Mojo::Template>

Reusable standup boilerplate to generate standup files.

=item L<Path::Tiny>

Directories and files path management.

=back

The C<diary> command line tool retrieve the user arguments, create the diary
file objet and write it on the disk.

=begin perl

    GetOptions (
      "data-dir:s"      => \$data_dir,
      "project-name:s"  => \$project_name
    ) or die("Error in command line arguments\n" );

    my $diary = App::Standup::Diary
      ->new(
        data_dir     => $data_dir,
        project_name => $project_name
      );

    $diary->write;

=end perl

The main C<App::Standup::Diary> file compose two roles (with the C<:does()>
keyword) for dealing with the dates and project parts. Each role manage it's own
set of fields, e.g. C<App::Standup::Role::Date> provide the daily C<$date> as a
C<Time::Piece> object so that it can be reused all over the place.

There's also a templating class that generates Markdown files.

=begin markdown

    # <%= $project_name %> <%= $today %>

    - done
    - todo
    - blocking

=end markdown

It doesn't allow customisation at the moment but we would really like to add a
C<--template> option so that the elves can provide a file type of their choice,
or seasonnal ornaments for those who like ASCII art or emoji.

=head2 Usage of Object::Pad

App::Standup::Diary was written with L<Object::Pad> from scratch. It was not
converted from another OO toolkit, e.g. Moose.

The L<App::Standup::Diary> class is equiped with the following fields:

=for :list
* $daily_data_path
* $data_dir
* $template

In addition two more field are provided by the L<App::Standup::Role::Date>
and L<App::Standup::Role::Project> roles:

=for :list
* $date
* $project_name

It makes very easy to declare all the class fields at the top of the class.
Various L<field attributes|https://metacpan.org/pod/Object::Pad#field> are
available to manipulate each fields capacites:

    field $template :writer :accessor;

Note that C<field> replaced the C<has> keyword for attributes declarations in
usual OO Perl toolkits. It's still possible to create local method variables
with C<my $santa>, though, no worries.

TODO taking a look at the C<write> method

=begin perl

    method write {

      $self->set_template( Standup::Diary::Template->new(
        date         => $self->date,
        project_name => $self->project_name
      ));

      if ( $self->should_create_dir ) {
        say "$daily_data_path should be created";
        $self->create_directories_tree;
      } else {
        $self->init_daily_data_path($self->build_path($self->date->ymd('/')));
      }

      my $file_path = path($self->build_full_file_path);

      path($file_path)->spew_utf8($template->render) and say "Diary entry created $file_path"
        unless $file_path->exists and say "Entry already exist";

    }

=end perl

The first benefits is that we have automatic method signature (if using
C<5.26>+), and that C<$self> is available without having to declare it. All
class fields are available through C<$self>, including the ones that are
provided by roles.

Since C<$template> got a C<:writer> attribute, we got a C<set_template> method
to mutate it's value.

After testing the C<diary> software for a couple of years, Sparkle considere
writing new code for the Delivery Reindeer Drones core software with
L<Object::Pad> (or more likely it's core implementation) instead of the aging OO
toolkits, as it prove to allow the writing of clearer code, with good separation
of concerns and easy to test.

=begin perl

    use Test2::V0;
    use Time::Piece;
    use App::Standup::Diary;

    my $d = App::Standup::Diary->new( data_dir => '', project_name => 'bar' );

    my $today = localtime;
    my ($year_month) = $today->ymd('/') =~ m/ \d{4} \/ \d{2} /gx;

    is $d->daily_data_path, $d->data_dir . '/' . $year_month, 'Daily data path match today\'s date';

=end perl

=head2 Happy advent season!

In the end Hermey finally got permission from Elf ProductOwner to open a
dentist's office at the North Pole, with having him scheduled for an immediate
appointment after noticing something bad with his teeth. But Sparkle improved
the tool with the rest of the team, what made them more productive and relaxed.

=cut