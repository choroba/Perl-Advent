Author: tim.potapov+advent@gmail.com
Title: Programming like a BEAST
Topic: e

=encoding utf8

=head1 Enhance Your Development Workflow with the e Module

You know how certain aspects of development can be
a real drag - slow and pretty boring?
I’ve definitely been there. But here’s where the C<e>
module comes in and changes the game.

=head1 Rapid Prototyping

The C<e> module comes loaded in with many features
that can aid in rapid prototyping as well as testing.

=head2 Let's Make Selenium Testing Less Painful Again

One of its cool features is the C<repl> breakpoint
command, which can seriously simplify debugging and
testing processes across the board.

It can also be used from the command line like this:

=begin perl

    perl -Me -e 'my $var = 111; repl'

=end perl

With that simple one-liner, you trigger an
interactive breakpoint which pauses the execution
of the program.

=for :html
<img src="repl_startup.png">

You can investigate data and try things out.

=for :html
<img src="repl_execute.png">

Once satisfied, you can quit
the debugger and code flow would continue as usual.

=for :html
<img src="repl_exit.png">

So, instead of dealing with all the usual hassle
of setting "breakpoints" and debugging manually
(yes, I taking about you C<print>), you can use
C<e> to just pop in a breakpoint whenever you
need it. This means you can pause execution,
check out what’s going on, and make adjustments
on the fly.

A prime example of where C<e> shines is in
Selenium testing, where it can significantly
ease the process. Selenium tests can be
notoriously slow and cumbersome, but the
C<repl> breakpoint feature makes it less painful.

However, it’s not just for Selenium, C<e> can
enhance various development tasks by making the
whole debugging and testing experience accelerated,
quickly done, and, dare I say, even a bit enjoyable.

=head2 More Tricks up its Sleeve

Besides making a fancy breakpoint, C<e> can a wide array of
tricks to help one in common daily tasks.

=head2 The Obnoxious Say

Have you ever added a print statement, only to realize that there
is no output for some reason?
(Assuming you have no syntax errors).

Now, imagine working in a large, complex codebase where,
buried deep within a function, C<STDOUT> or C<STDERR> is being closed.

=begin perl

    close STDOUT;
    open STDOUT, '>', '/dev/null';

    say "You wont ever see this :(";

=end perl

So you now need to find the place that closes C<STDOUT> to comment it out
for debugging or figure out how to print it to the screen
(maybe there is a C<--verbose> option).

=head3 Say Hello to the Obnoxious Say

=begin perl

    use e;

    print "You'll see this.\n.";
    say "And this";

    close *STDOUT;
    close *STDERR;

    print "But not this.\n";
    say "YOU'll STILL SEE THIS!";

=end perl

Whether your output streams are open, closed, or redirected,
the obnoxious say will always ensure the message gets
displayed on your screen.

=head2 Pod Table Of Contents

Need a quick overview of a Perl module?
Well, the C<pod> command-line tool (included with C<e>
is your friend.

Using it you can get a quick overview of a module:

- Methods names and summaries.
- Module inheritance.
- Jump into the module quickly (via Vim).

At a glance I can see what methods are available for a module.

=head3 For Mojo::UserAgent

=for :html
<img src="pod_user_agent.png">

=head3 For Mojo::JSON

=for :html
<img src="pod_json.png">

Can also look at a specific method:

=for :html
<img src="pod_json_j.png">

Using the edit option you can also jump inside the module file
to explore how it works:

=for :html
<img src="pod_json_j_edit.png">

(In that case above, need to press C<n> again to find the
actual definition of the method)

=head2 Performance Efficiency

Worried about performance? Well, stop it!
C<e> has been optimized to have a very tiny
footprint to conserve space and resources.
Also, it makes great use of Just In Time (JIT)
module loading: you pay only for what you use.
For instance, I use it on my smartphone with Termux,
and it’s incredibly fast - even with the phone's
limited resources. The impact is practically
negligible, and it runs smoothly without any
noticeable delays.

=head2 Interactive Demos

To see C<e> in action, just install it with cpan(m):

=begin code

    cpanm e

=end code

Then skim through the short doc.

You can also try out this L<Perl Banjo|https://perlbanjo.com/dbce20686b>
interactive demo. You can run a few example
snippets and experiment with them directly.

Feel free to modify the snippets on the right to explore
different features and see how C<e> can enhance
your own development workflow.

(Unfortunately, at this time, not all features can be currently
used in PerlBanjo.)

=head2 Your Turn

With the power of C<e> at your fingertips,
it’s time to dive in and explore!
Whether you’re easing the pain of Selenium testing,
ensuring your output is always present with the obnoxious C<say>,
or seamlessly navigating documentation using C<pod>,
C<e> is here to transform your experience.
Try it out and see how it fits into your workflow!
