Author: Marc Perry <marcperryster@gmail.com>
Title: "Investigating a new respiratory virus outbreak in Santa's workshop"
Topic: Module::None

=encoding utf8

Christmas eve was quickly approaching, and Santa was trying to decide whether
to purchase masks for all of the reindeer again this year (he was aware that
there were documented cases of SARS-CoV-2 infecting White-Tail Deer
(O.virginianaus), and he knew that Reindeer (R.tarandus) were closely related),
when the Chief Elf interrupted his train of thought to inform him that two of the
elves in workshop were in the infirmary with respiratory distress.
Testing had revealed that they were both infected with Respiratory Syncitial Virus
(RSV), specifically with the RSV-A subtype.

Santa asked "Do we know where they were exposed, or if one of them
transmitted it to the other?  We may need to require everyone at the North Pole
to mask again until after Christmas eve . . . "

"The diagnostic lab says the two viruses are similar but not identical.  Also
they are not confident of the lineage calls and the clade assignments because we
are using a new set of PCR primers designed in Edinburgh, which are based on a
newer RSV-A reference sequence (RefSeq).  The problem is that we are using the RSV-A phylogenetic
tree available at L<usher.bio|http://usher.bio> and that tree was built using the NCBI RefSeq as
the root.  You can see where the problem arises . . . "

Santa thought for a moment and said "Oh, blast!  We aligned our fastq reads to
the other RefSeq, and at the primer trimming step we are using the genomic
coordinates from that different virus strain.  So if we first align against the
NCBI RefSeq genome (to get more accurate lineage calls and clade assignments) then the
primer trimming step will not work as intended.  Huh! Hmmm, do you think we could
align those two different RSV-A RefSeqs to each other and then modify the coordinates
in the primer bed file so it uses the NCBI RefSeq's genomic coordinates intead?!?"

The Chief Elf sketched this out on the iceboard and said, "I think this could
work.  I will ask our bioinformatic software developers to tackle the problem."

And so gentle reader that is how we arrived at a simple, but tedious task of
converting the genomic coordinates in this bed file:


So that it would contain the correct coordinates from a different RSV-A subtype
RefSeq.  It quickly became apparent that this problem could be solved much more quickly
using the Awesome Power of Perl, unfortunately there was no out-of-the-box
solution available in the existing base of Perl code.  But how to proceed?

=head2 Using the Awesome Power of Perl in Bioinformatics

Each of the two genome files are simple text files consisting of an alphabet of
four letters (A, C, G, and T) (I know, I know, both SARS-CoV-2 and RSV are
technically RNA viruses, so a purist would replace the 'T' with a 'U', but in
real life we just use T, it makes life simpler).    


=begin perl

#!/usr/bin/env perl
use strict;
use warnings;

my $query_input = $ARGV[0];
my $subject_input = $ARGV[1];
my $input_bed = $ARGV[2];

open my ($FH1), '<', $query_input or die "Could not open $query_input for reading\n";
open my ($FH2), '<', $subject_input or die "Could not open $subject_input for reading\n";

my @global_array = ();
$global_array[0] = { query => undef,
		     sbjct => undef,
		   };

# This global counter serves as the indices for the first data structure
# that captures the information at each place in the aligned sequences
my $counter = 0;

# Parse the rows of the first file
while ( <$FH1> ) {
    chomp;
    # Each of these filtered rows has the same structure, in addition to
    # A, C, G, and T, the N-W output can also contain hyphens (dashes), so
    # our regex has to include that in the string we are capturing
    my ($seq) = $_ =~ m/Query\s+\d+\s+([\w\-]+)\s+\d+/; 
    # Parse the 60 nucleotide string into individual characters
    my @qchars = split(//, $seq);
    foreach my $q ( @qchars ) {
        $counter++;
        # Load up the array of hashrefs with the symbols
	$global_array[$counter]{query} = $q;
    }	
}
close $FH1;


$counter = 0;
while ( <$FH2> ) {
    chomp;
    my ($seq) = $_ =~ m/Sbjct\s+\d+\s+([\w\-]+)\s+\d+/; 
    my @schars = split(//, $seq);
    foreach my $s ( @schars ) {
        $counter++;
	$global_array[$counter]{sbjct} = $s;
    }
}
close $FH2;

# Now we process the information in each element of the
# @global_array, and store that in this global hash
# the keys of this hash are genomic coordinates for the
# Edinburgh RSV-A RefSeq and the values are the genomic
# coordinates of the NCBI RSV-A RefSeq
my %ncbi_coordinates_of = ();

my $qcounter = 0;
my $scounter = 0;

# There is nothing useful in the [0] element
foreach my $i ( 1..$#global_array ) {
    my $key = undef;
    my $value = undef;
    # If the string from the N-W output contains a '-' then we
    # need to handle those differently.  We only increment the
    # $qcounter when the value in 'query' matches a letter
    if ( $global_array[$i]{query} =~ m/\w/ ) {
        $qcounter++;
        $key = $qcounter;
        if ( $global_array[$i]{sbjct} =~ m/\w/ ) {
            $scounter++;
	    $value = $scounter;
	}
        $ncbi_coordinates_of{$key} = $value;
    }
    else {
	$scounter++;
	next;
    }
}

# After all of that manipulation and data wrangling, the problem now becomes
# very simple.  We read in the starting primer bed file and iterate over each
# TSV record.  We use the information in columns 2 and 3 to query the
# %ncbi_coordinates_of hash, and insert the coordinates we want from the hash
# values.  The modified record is immediately printed to STDOUT

open my ($FH3), '<', $input_bed or die "Could not open $input_bed for reading\n";

while ( <$FH3> ) {
    my @fields = split(/\t/, $_);
    # Change the sequence name in column 1
    $fields[0] = 'NC_038235.1';
    # It is formally possible that either the 'start' or the 'end' of the
    # Query sequence is NOT in the %ncbi_coordinates_of hash, so check for this
    unless ( exists $ncbi_coordinates_of{$fields[1]} and exists $ncbi_coordinates_of{$fields[2]} ) {
        $fields[1] = $fields[2] = 'undef';
        print join("\t", @fields);
        next;
    }
    # Sometimes the 'start' and 'end' coordinates from the Query sequence ARE keys in the
    # %ncbi_coordinates_of hash, but the corresponding values from the Sbjct sequence are undef
    # so continue processing gracefully when this occurs
    $fields[1] = $ncbi_coordinates_of{$fields[1]} //= 'undef';
    $fields[2] = $ncbi_coordinates_of{$fields[2]} //= 'undef';
    print join("\t", @fields);
}
close $FH3;

exit;

=end perl

A C<code> section can syntax-highlight non-Perl too:

=begin code

  # inside "code" blocks, make syntax-highlighted code
  # with Pod::Elemental::Transformer::Codebox

=end code


=head2 Lists

=for :list
* short list syntax from Pod::Elemental::Transformer::List
* duck
* duck
* goose

=cut
